# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: PHP package

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: 
      - created
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get version values
        id: vars
        run: |
          echo ::set-output name=version::$(sed -nE 's/^\s*"version": "(.*?)",$/\1/p' composer.json)
          echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Show captured versions
        run: |
          echo 'Version in source code: ${{ steps.vars.outputs.version }}'
          echo 'Release version: ${{ steps.vars.outputs.tag }}'
      - name: Check version tag
        uses: nick-invision/assert-action@v1.1.0
        if: github.event_name == 'release'
        with:
          expected: ${{ steps.vars.outputs.tag }}
          actual: ${{ steps.vars.outputs.version }}
          comparison: exact
  build:
    needs: check
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-latest ] #, windows-latest, macos-latest ]
        php-versions: [ '7.3', '7.4' ]
    runs-on: ${{ matrix.operating-system }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, intl
          ini-values: post_max_size=256M, log_errors=1
          coverage: pcov 
          tools: phpunit       
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install dependencies
        run: |
          composer install --no-progress --prefer-dist --optimize-autoloader
          composer run-script post-install-cmd --no-interaction
      # Add a step to run migrations if required
      - name: Test with phpunit
        run: vendor/bin/phpunit --coverage-clover=coverage.xml tests
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v1.5.0
        if: matrix.operating-system == 'ubuntu-latest'
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          PHP: ${{ matrix.php-version }}
          OS: ${{ matrix.operating-system }}
        with:
          fail_ci_if_error: true
          env_vars: OS,PHP
          files: ./coverage.xml
  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Store version
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Build package
        run: |
          # Publish manually
          curl -XPOST -H 'content-type:application/json' 'https://packagist.org/api/update-package?username=rogerrcod&apiToken=${{ secrets.PACKAGIST_API_TOKEN}}' -d'{"repository":{"url":"https://packagist.org/packages/tesla-ce/client"}}'
  sonar:
    name: Sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: docker://sonarsource/sonar-scanner-cli:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
